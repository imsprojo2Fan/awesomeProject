<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.awesome.dao.CollectMapper" >
  <resultMap id="BaseResultMap" type="com.awesome.model.Collect" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="openId" property="openid" jdbcType="VARCHAR" />
    <result column="fId" property="fid" jdbcType="INTEGER" />
    <result column="mId" property="mid" jdbcType="INTEGER" />
    <result column="pId" property="pid" jdbcType="INTEGER" />
    <result column="updated" property="updated" jdbcType="TIMESTAMP" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, openId, fId, mId, pId, updated, created
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from collect
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from collect
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.awesome.model.Collect" >
    insert into collect (id, openId, fId, 
      mId, pId, updated, 
      created)
    values (#{id,jdbcType=INTEGER}, #{openid,jdbcType=VARCHAR}, #{fid,jdbcType=INTEGER}, 
      #{mid,jdbcType=INTEGER}, #{pid,jdbcType=INTEGER}, #{updated,jdbcType=TIMESTAMP}, 
      #{created,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.awesome.model.Collect" >
    insert into collect
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="openid != null" >
        openId,
      </if>
      <if test="fid != null" >
        fId,
      </if>
      <if test="mid != null" >
        mId,
      </if>
      <if test="pid != null" >
        pId,
      </if>
      <if test="updated != null" >
        updated,
      </if>
      <if test="created != null" >
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="openid != null" >
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="fid != null" >
        #{fid,jdbcType=INTEGER},
      </if>
      <if test="mid != null" >
        #{mid,jdbcType=INTEGER},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.awesome.model.Collect" >
    update collect
    <set >
      <if test="openid != null" >
        openId = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="fid != null" >
        fId = #{fid,jdbcType=INTEGER},
      </if>
      <if test="mid != null" >
        mId = #{mid,jdbcType=INTEGER},
      </if>
      <if test="pid != null" >
        pId = #{pid,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awesome.model.Collect" >
    update collect
    set openId = #{openid,jdbcType=VARCHAR},
      fId = #{fid,jdbcType=INTEGER},
      mId = #{mid,jdbcType=INTEGER},
      pId = #{pid,jdbcType=INTEGER},
      updated = #{updated,jdbcType=TIMESTAMP},
      created = #{created,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="listAllCount" parameterType="Map" resultType="java.lang.Integer">
    select count(*) from collect
    <if test="searchKey !=null and searchKey!=''">
      where ( account like '%${searchKey}%' OR nickname LIKE '%${searchKey}%' )
    </if>
  </select>

  <select id="listByPage" parameterType="Map" resultType="Map">
    select * from collect

    <if test="searchKey !=null and searchKey!=''">
      where (account like '%${searchKey}%' OR nickname LIKE '%${searchKey}%')
    </if>
    <if test="sortCol !=null and sortCol!='' ">
      Order by ${sortCol} ${sortType}
    </if>

    LIMIT ${pageNow},${pageSize}
  </select>

  <select id="searchByKey" parameterType="Map" resultType="Map">
    select * from collect where ${key} = #{value}
  </select>

</mapper>