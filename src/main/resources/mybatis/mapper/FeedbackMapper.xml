<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awesome.dao.FeedbackMapper">
  <resultMap id="BaseResultMap" type="com.awesome.model.Feedback">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="rid" jdbcType="INTEGER" property="rid" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="openId" jdbcType="VARCHAR" property="openid" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="nickName" jdbcType="VARCHAR" property="nickname" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
  </resultMap>
  <sql id="Base_Column_List">
    id, rid, type, description, openId, ip, address, nickName, email, created
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from feedback
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from feedback
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.awesome.model.Feedback">
    insert into feedback (id, rid, type, 
      description, openId, ip, 
      address, nickName, email, 
      created)
    values (#{id,jdbcType=INTEGER}, #{rid,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{description,jdbcType=VARCHAR}, #{openid,jdbcType=VARCHAR}, #{ip,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{created,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.awesome.model.Feedback">
    insert into feedback
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="rid != null">
        rid,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="openid != null">
        openId,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="nickname != null">
        nickName,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="rid != null">
        #{rid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="openid != null">
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.awesome.model.Feedback">
    update feedback
    <set>
      <if test="rid != null">
        rid = #{rid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="openid != null">
        openId = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickName = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awesome.model.Feedback">
    update feedback
    set rid = #{rid,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      openId = #{openid,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      nickName = #{nickname,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="listAllCount" parameterType="Map" resultType="java.lang.Integer">
    select count(*) from feedback
    <if test="searchKey !=null and searchKey!=''">
      where ( account like '%${searchKey}%' OR nickname LIKE '%${searchKey}%' )
    </if>
  </select>

  <select id="listByPage" parameterType="Map" resultType="Map">
    select * from feedback

    <if test="searchKey !=null and searchKey!=''">
      where (account like '%${searchKey}%' OR nickname LIKE '%${searchKey}%')
    </if>
    <if test="sortCol !=null and sortCol!='' ">
      Order by ${sortCol} ${sortType}
    </if>

    LIMIT ${pageNow},${pageSize}
  </select>

  <select id="searchByKey" parameterType="Map" resultType="Map">
    select * from feedback where ${key} = #{value}
  </select>
</mapper>