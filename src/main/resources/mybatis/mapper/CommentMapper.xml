<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.awesome.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.awesome.model.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="rid" property="rid" jdbcType="VARCHAR" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="nickName" property="nickName" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="zanCount" property="zanCount" jdbcType="INTEGER" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, rid, uid,ip,nickName,email, content, zanCount, created
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.awesome.model.Comment" >
    insert into comment (id, rid, uid,ip,nickName,email, content,
      zanCount, created)
    values (#{id,jdbcType=INTEGER}, #{rid,jdbcType=VARCHAR},#{uid,jdbcType=INTEGER},#{ip,jdbcType=VARCHAR},#{nickName,jdbcType=VARCHAR},#{nickName,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
      #{zancount,jdbcType=INTEGER}, #{created,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.awesome.model.Comment" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="rid != null" >
        rid,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="nickName != null" >
        nickName,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="zanCount != null" >
        zanCount,
      </if>
      <if test="created != null" >
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="rid != null" >
        #{rid,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null" >
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="zanCount != null" >
        #{zanCount,jdbcType=INTEGER},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.awesome.model.Comment" >
    update comment
    <set >
      <if test="rid != null" >
        rid = #{rid,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null" >
        nickName = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="zanCount != null" >
        zanCount = #{zanCount,jdbcType=INTEGER},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awesome.model.Comment" >
    update comment
    set rid = #{rid,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=INTEGER},
      ip = #{ip,jdbcType=VARCHAR},
      nickName = #{nickName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      zanCount = #{zanCount,jdbcType=INTEGER},
      created = #{created,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="listAllCount" parameterType="Map" resultType="java.lang.Integer">
    select count(*) from comment where 1=1 and rid= '${rid}'
  </select>

  <select id="listByPage" parameterType="Map" resultType="Map">
    select * from comment where 1=1
    and rid= '${rid}'
    <if test="sortCol !=null and sortCol!='' ">
      Order by ${sortCol} ${sortType}
    </if>
    LIMIT ${pageNow},${pageSize}
  </select>

  <select id="searchByKey" parameterType="Map" resultType="Map">
    select * from comment where ${key} = ${value}
  </select>
</mapper>